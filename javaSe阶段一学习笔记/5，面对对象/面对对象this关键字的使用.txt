类就是一个概念，如：狗
对象是一个具体的实物，如：具体的一条狗
类类似是一个模板的东西，对象（实例）是根据这个模板所产生的样板。
类：概念，是抽象的。
对象：具体的
语法：
class 类名{
  属性
  行为
}
类名和文件名要一致，首字母要大写，如果类名是多个单词构成，那么每个单词首字母都要大写。
属性(成员变量)的定义：
数据类型 属性名；{=初始值}
中括号里面的可以没有，属性可以没有初始值。
行为（方法）：
语法：
public   {static可以没有}返回值类型 或 void 方法名（数据类型 参数名）
{
return数值
}
注意：类是一个概念，不能直接使用，必须使用这个类的具体的对象，
根据类来创建对象，
语法：
类名（数据类型） 变量名 =new 类名（）；
如:Car car =new car();
一个文件中可以写多个类
如何给一个具体的对象来赋值属性：
语法：
对象的变量.属性名=具体值;
如:car.yanse =”红色”;
类的对象的方法的调用：
语法：
对象的变量名.方法名（）;没有参数要赋予参数。
如：car.pao();
具体案例：见《面对对象的操作案例》；
2.局部变量和成员变量的区别
局部变量：
1.在方法中或在语句块中。
2.局部变量必须赋初始值才能用。
3.都存储在栈中
4.生命周期：定义的时候产生，当前的方法的括号执行完毕就会消失。
成员变量（属性）
1.在类里面定义。
2.可以不赋值，如果不赋值都有默认值。
3.存储在栈中。
4.生命周期：随着对象的消失而消失，会被jvm的垃圾回收器来回收掉。
匿名对象
没有意义的对象！因为在栈中没有一个变量对它做引用，很快就会被垃圾回收器回收掉。在实际开发中要避免匿名对象。
封装：
将属性私有化，使用private关键字完成属性私有化，这种只有本类能访问。

目的：提高数据安全性，通过封装，可以实现对属性的访问控制，同时增强了程序的可维护性。
如果在其他类中直接访问一个带有平日private的属性时报错。
1,通过public的对外公开的set（可以自己定义名字）方法来设置私有的属性值
2，通过public的对外公开的get（可以自己定义名字）方法来获得私有的属性值
如：设置属性值
private String name;
  public void setName(String a){
		name=a;
	}
cat.setName("加菲猫");
获取
public String getName(){
		return name;
	}
String name=cat.getName();
具体案例：见《面对对象的操作案例》中的封装案例；
this关键字：
1，打印一个对象，输出是这个对象的地址（jdk提供的一个地址）;
2,this只能在类的对象方法中使用
3，this代表当前使用这个this所在的方法的对象的自身
4，this可以在方法内区分同名的类的属性和参数名，有this的一定是属性，没有this的一定是方法的参数名。 
具体使用：如： public void setName(String name){
	   this.name=name;
   }
构造器：
构造器的语法：
public 类名（数据类型 参数名，…多个）{

}
具体使用：public Man(String name,char xin){
		this.name=name;
		this.xin=xin;
	}//调用两个参数本类的构造器
	public Man(String name,char xin,int gao){
		this(name,xin);
		this.gao=gao;
	}
通过构造器可以对属性赋值：Man man1=new Man("阿狗",'男',170);
目的：创建对象
构造器的特点：
1,方法名和类名一致。
2,方法没有返回值没有void。
3，参数可有可无。
注意：如果类中没有带有参数的构造器，就可以使用一个隐藏的默认构造器来创建对象，如果一旦有带有参数的构造器，默认的构造器就会被覆盖，我们可以显式的定义出来默认构造器就可以使用了。
通过this（实参列表）可以调用本类中的构造器，必须注意，this必须在方法中的第一行!
